<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git常用命令收集</title>
    <url>/posts/f9c13f40-7f52-11ec-8b0d-2f0f3094676b/</url>
    <content><![CDATA[<h2 id="远程仓库拉取代码"><a href="#远程仓库拉取代码" class="headerlink" title="远程仓库拉取代码"></a>远程仓库拉取代码</h2><pre class="language-none"><code class="language-none"># 拉取一个项目和它的整个代码历史
git clone [https url|ssh url]
# 拉取指定分支
git clone [https url|ssh url] -b [branch] 
# 仅拉取最近一次提交
git clone [https url|ssh url] --depth 1
# 本地关联远程仓库拉取代码
git remote add origin [https url|ssh url]
git pull origin [branch]</code></pre>

<h2 id="查看仓库信息"><a href="#查看仓库信息" class="headerlink" title="查看仓库信息"></a>查看仓库信息</h2><pre class="language-none"><code class="language-none"># 查看仓库当前的状态
git status
# 简化状态输出
git status -s
#查看指定文件的修改记录
git blame [filename]
# 查看未add文件变动
git diff
# 查看已add文件变动
gut diff --cached
# 查看已add和未add文件的变动
git diff HEAD
# 显示变动文件摘要
git diff --stat
# 对比两次提交的差异, 或两个分支的差异
git diff [first-branch] [second-branch]
# 查看历史提交
git log
# 查看简化版历史提交
git log --oneline
# 查看合并拓扑图
git log --graph 
# 逆向展示历史提交
git log --reverse
# 查看指定作者的历史提交
git log --author&#x3D;[name]
# 查看指定日期内的提交
git log --oneline --before&#x3D;&#123;2022-01-18&#125; --after&#x3D;&#123;2020-01-18&#125;
# 查看仓库所有变动信息, reflog-id也可用作回退
git reflog</code></pre>

<h2 id="添加-删除-重命名文件"><a href="#添加-删除-重命名文件" class="headerlink" title="添加/删除/重命名文件"></a>添加/删除/重命名文件</h2><pre class="language-none"><code class="language-none"># 添加指定文件或目录到暂存区
git add [filename]
# 添加当前目录所有文件到暂存区
git add .
# 添加所有文件到暂存区
git add --all
# 删除文件
git rm [filename]
# 强制删除, 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 
git rm [filename] -f
# 把文件从暂存区域移除，但仍然希望保留在当前工作目录中
git rm --cached [filename]
# 文件重命名
git mv [filename] [newfilename]
# 强制重命名, 覆盖重复文件
git mv -f [filename] [newfilename]</code></pre>

<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><pre class="language-none"><code class="language-none"># 提交所有暂存区文件
git commit -m [msg]
# 提交指定文件
git commit [file1] [file2] ... -m [msg]
# 追加提交, 不产生新的commit的情况下将新修改的代码追加到前一次的commit中
# 也可用于修改commit msg
git commit --amend
# 空提交, 一般用于重跑ci
git commit --allow-empty -m [msg]</code></pre>

<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><pre class="language-none"><code class="language-none"># 回退至上个版本
git reset HEAD^
# 回退某个文件到上个版本
git reset HEAD^ [filename]
# 回退到指定版本并保留当前版本改动
git reset [commit-id]
# 舍弃当前版本改动回退至指定版本
git reset --hard [commit-id]
# 回退到指定版本并将改动加入暂存区
git reset --soft [commit-id]
# 创建一个新的提交回退指定版本的内容(将制定commit-id提交的代码删除并生成一个新的提交)
git revert [commit-id]</code></pre>

<h2 id="代码合并"><a href="#代码合并" class="headerlink" title="代码合并"></a>代码合并</h2><pre class="language-none"><code class="language-none"># 将指定分支合并到当前分支, 有冲突需要解决冲突并提交新的commit
git merge [branch]
# 将指定分支作为base分支, 先处理冲突后按照时间线将commit合并, 对比merge合并提交的代码更加整洁
git rebase [branch]
# 将指定提交合并到当前分支
git cherry-pick [commit-id]</code></pre>

<h2 id="stash保存及恢复进度"><a href="#stash保存及恢复进度" class="headerlink" title="stash保存及恢复进度"></a>stash保存及恢复进度</h2><pre class="language-none"><code class="language-none"># 清理stash暂存区
git stash clear
# 将当前变动代码加入stash暂存区
git stash 
# 查看stash暂存区内容
git stash list 
# 将最后加入暂存区的内容提取到当前分支, 并从stash暂存区中删除
git stash pop
# 弹出stash暂存区中的指定内容
git stash pop [stash-id]</code></pre>

<h2 id="git-commit-Angular规范"><a href="#git-commit-Angular规范" class="headerlink" title="git commit Angular规范"></a>git commit Angular规范</h2><p>commit message的规范有助于我们对于提交历史的追溯, 也会让我们在每次提交时更加慎重</p>
<p>格式如下</p>
<pre class="language-none"><code class="language-none">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></pre>

<ul>
<li><p>type(必须)</p>
<p>  用于说明git commit的类别，只允许使用下面的标识。</p>
</li>
<li><p>scope(可选)</p>
<p>  scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>
<p>  例如在Angular，可以是location，browser，compile，compile，rootScope， ngHref，ngClick，ngView等。如果你的修改影响了不止一个scope，你可以使用*代替。</p>
</li>
<li><p>subject(必须)</p>
<p>  subject是commit目的的简短描述，不超过50个字符。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>type选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>feat</td>
<td>新功能（feature）。</td>
</tr>
<tr>
<td>fix/to</td>
<td>修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。</td>
</tr>
<tr>
<td>fix</td>
<td>产生diff并自动修复此问题。适合于一次提交直接修复问题</td>
</tr>
<tr>
<td>to</td>
<td>只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix</td>
</tr>
<tr>
<td>docs</td>
<td>文档（documentation）。</td>
</tr>
<tr>
<td>style</td>
<td>格式（不影响代码运行的变动）。</td>
</tr>
<tr>
<td>refactor</td>
<td>重构（即不是新增功能，也不是修改bug的代码变动）。</td>
</tr>
<tr>
<td>test</td>
<td>增加测试。</td>
</tr>
<tr>
<td>chore</td>
<td>构建过程或辅助工具的变动。</td>
</tr>
<tr>
<td>revert</td>
<td>回滚到上一个版本。</td>
</tr>
<tr>
<td>merge</td>
<td>代码合并。</td>
</tr>
<tr>
<td>sync</td>
<td>同步主线或分支的Bug。</td>
</tr>
</tbody></table>
<p>提交示例</p>
<pre class="language-none"><code class="language-none">fix(login): 修复账号中有不合法字符导致校验错误
feat(export): 增加导出功能 </code></pre>
]]></content>
      <categories>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Pages+Hexo+Matery主题搭建个人博客</title>
    <url>/posts/1bfa13c0-7e9a-11ec-a2eb-93bcbf8a55e3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>随着工作经历等增加, 个人所接触的知识面广度也在增加, 最近发现有的之前掌握但很久不用的技术逐渐被遗忘, 于是决定创建此博客用做记录我的技术成长, 也方便在日后哪天需要用到对应知识时可以快速重温。</li>
<li>搭建博客的方式有很多种, 博客类的开源项目也很多, 综合搭建成本, 可扩展性, 性能等因素最终决定使用Git Pages+Hexo方式搭建</li>
</ul>
<h2 id="本文所使用环境如下"><a href="#本文所使用环境如下" class="headerlink" title="本文所使用环境如下:"></a>本文所使用环境如下:</h2><ul>
<li>  MacOs-11.0.1</li>
<li>  Node-16.9.1</li>
<li>  Hexo-5.4.1</li>
</ul>
<h2 id="GitHub创建Git-Pages仓库"><a href="#GitHub创建Git-Pages仓库" class="headerlink" title="GitHub创建Git Pages仓库"></a>GitHub创建Git Pages仓库</h2><ul>
<li>  登陆GitHub，新建一个名为”你的用户名.github.io”的仓库</li>
<li>  创建index.html文件并输入任意内容</li>
<li>  浏览器访问”https://你的用户名.github.io”查看是否创建成功</li>
</ul>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><pre class="language-python" data-language="python"><code class="language-python">brew install node
# 安装淘宝镜像
npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre>

<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><pre class="language-none"><code class="language-none">npm install -g hexo-cli</code></pre>
<h2 id="创建hexo博客"><a href="#创建hexo博客" class="headerlink" title="创建hexo博客"></a>创建hexo博客</h2><pre class="language-none"><code class="language-none">mkdir blogs
cd blogs
hexo init
npm install

# 测试目录是否初始化成功
hexo g
hexo s</code></pre>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul>
<li>  修改blogs/_config.yml关联Git Pages仓库</li>
</ul>
<pre class="language-none"><code class="language-none">deploy:
    type: git
    repo: [Git Pages仓库地址]
    branch: master

# 安装部署插件
npm install hexo-deployer-git --save

# 部署
hexo clean
hexo d</code></pre>
<ul>
<li>  浏览器访问”https://你的用户名.github.io”查看是否部署成功</li>
</ul>
<h2 id="更换Matery主题"><a href="#更换Matery主题" class="headerlink" title="更换Matery主题"></a>更换Matery主题</h2><ul>
<li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">Matery中文文档</a><ul>
<li>按照文档中内容完成配置</li>
</ul>
</li>
</ul>
<h2 id="发布新的博客"><a href="#发布新的博客" class="headerlink" title="发布新的博客"></a>发布新的博客</h2><pre class="language-none"><code class="language-none">hexo new post 文章名称
hexo clean
hexo d -g # 生成并部署</code></pre>
<h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><ul>
<li><p>Matery支持对指定文章进行加密, 即访问文章前需要校验密码</p>
<ul>
<li>修改主题配置, 即themes目录下指定主题的_config.yml文件<ul>
<li>  找到配置中的verifyPassword开启</li>
</ul>
</li>
<li>  在需要加密的文章Front-matter中增加 password: SHA256加密密码(注: 需要将sha256结果转为16进制纯小写, 谷歌搜到的很多在线工具默认加密结果为大写会导致密码校验失败)</li>
<li>  访问文章时弹窗中输入sha256加密前的密码</li>
</ul>
</li>
<li><p>hexo-blog-encrypt插件实现文章加密</p>
<ul>
<li>  安装加密插件<pre class="language-none"><code class="language-none">npm install hexo-blog-encrypt --save</code></pre></li>
<li>  外层配置文件增加配置项(注: 并非选定主题中的_config.yml)<pre class="language-none"><code class="language-none"># Security
# 在需要加密的文章中增加private或protected标签即可, 访问密码为tags中对应password
encrypt: # hexo-blog-encrypt
    silent: true
    abstract: 这是一篇加密文章，需要密码才能继续阅读。
    message: 当前文章暂不对外可见，请输入密码后查看！
    tags:  
    - &#123;name: private, password: password1&#125;
    - &#123;name: protected, password: password2&#125;
    wrong_pass_message: 抱歉，您输入的密码错误，请检查后重新输入。
    wrong_hash_message: 抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。</code></pre></li>
</ul>
</li>
</ul>
<h2 id="固定url"><a href="#固定url" class="headerlink" title="固定url"></a>固定url</h2><p>解决修改文章名后url变化问题</p>
<pre class="language-none"><code class="language-none">npm install hexo-uuid --save</code></pre>
<p>修改外部_config.xml配置文件中的permalink</p>
<pre class="language-none"><code class="language-none">permalink: posts&#x2F;:uuid&#x2F;</code></pre>

<h2 id="Front-matter-可选项"><a href="#Front-matter-可选项" class="headerlink" title="Front-matter 可选项"></a>Front-matter 可选项</h2><table>
<thead>
<tr>
<th>配置选项</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td><code>Markdown</code> 的文件标题</td>
<td>文章标题，强烈建议填写此选项</td>
</tr>
<tr>
<td>date</td>
<td>文件创建时的日期时间</td>
<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>
</tr>
<tr>
<td>author</td>
<td>根 <code>_config.yml</code> 中的 <code>author</code></td>
<td>文章作者</td>
</tr>
<tr>
<td>img</td>
<td><code>featureImages</code> 中的某个值</td>
<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>
</tr>
<tr>
<td>top</td>
<td><code>true</code></td>
<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>
</tr>
<tr>
<td>hide</td>
<td><code>false</code></td>
<td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td>
</tr>
<tr>
<td>cover</td>
<td><code>false</code></td>
<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>
</tr>
<tr>
<td>coverImg</td>
<td>无</td>
<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>
</tr>
<tr>
<td>password</td>
<td>无</td>
<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>
</tr>
<tr>
<td>toc</td>
<td><code>true</code></td>
<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>
</tr>
<tr>
<td>mathjax</td>
<td><code>false</code></td>
<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>
</tr>
<tr>
<td>summary</td>
<td>无</td>
<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>
</tr>
<tr>
<td>categories</td>
<td>无</td>
<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>
</tr>
<tr>
<td>tags</td>
<td>无</td>
<td>文章标签，一篇文章可以多个标签</td>
</tr>
<tr>
<td>keywords</td>
<td>文章标题</td>
<td>文章关键字，SEO 时需要</td>
</tr>
<tr>
<td>reprintPolicy</td>
<td>cc_by</td>
<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="language-none"><code class="language-none">---
title: typora-vue-theme主题介绍
date: 2018-09-07 09:25:00
author: 赵奇
img: &#x2F;source&#x2F;images&#x2F;xxx.jpg
top: true
hide: false
cover: true
coverImg: &#x2F;images&#x2F;1.jpg
password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92
toc: false
mathjax: false
summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要
categories: Markdown
tags:
  - Typora
  - Markdown
---</code></pre>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
